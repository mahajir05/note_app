// Mocks generated by Mockito 5.3.2 from annotations
// in deptech_app/test/infrastructure/dal/daos/note/data_sources/note_db_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:deptech_app/infrastructure/dal/daos/user/models/base_list_resp.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'note_db_data_source_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseListResp_0<T> extends _i1.SmartFake
    implements _i2.BaseListResp<T> {
  _FakeBaseListResp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DbServiceTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbServiceTest extends _i1.Mock implements _i3.DbServiceTest {
  MockDbServiceTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, Object?>> getSingle({
    required String? tableName,
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingle,
          [],
          {
            #tableName: tableName,
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue:
            _i4.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i4.Future<Map<String, Object?>>);
  @override
  _i4.Future<_i2.BaseListResp<T>> getList<T>({
    required Function? fromJsonModel,
    required String? tableName,
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [],
          {
            #fromJsonModel: fromJsonModel,
            #tableName: tableName,
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseListResp<T>>.value(_FakeBaseListResp_0<T>(
          this,
          Invocation.method(
            #getList,
            [],
            {
              #fromJsonModel: fromJsonModel,
              #tableName: tableName,
              #where: where,
              #whereArgs: whereArgs,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseListResp<T>>);
  @override
  _i4.Future<int> insert({
    required String? tableName,
    required Map<String, Object?>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [],
          {
            #tableName: tableName,
            #data: data,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> update({
    required String? tableName,
    required int? id,
    required Map<String, Object?>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #tableName: tableName,
            #id: id,
            #data: data,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> delete({
    required String? tableName,
    required int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #tableName: tableName,
            #id: id,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
